name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow the workflow to continue even if linting fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run linting
        run: npm run lint

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build application
        run: npm run build --configuration=production
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1
          
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Create and transfer deployment files
        run: |
          # Create docker-compose file
          cat > docker-compose.yml << EOF
          version: '3.8'
          
          services:
            traderpluseditor:
              container_name: traderpluseditor
              image: alpine:latest
              volumes:
                - ./dist:/src
                - sites_volume:/sites
              command: sh -c "mkdir -p /sites/traderpluseditor && cp -r /src/traderpluseditor/browser/* /sites/traderpluseditor/"
              networks:
                - caddy-network
              restart: "no"
          
          networks:
            caddy-network:
              external: true
          
          volumes:
            sites_volume:
              name: caddy_sites
              external: true
          EOF
          
          # Create a tar of the dist directory and docker-compose file
          tar -czf deployment.tar.gz dist docker-compose.yml
          
      - name: Deploy to VPS
        run: |
          # Transfer the deployment package
          scp deployment.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/rdpuser/apps/
          
          # Connect to VPS and perform deployment
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Create directory if it doesn't exist
            mkdir -p /home/rdpuser/apps/traderpluseditor
            
            # Extract the deployment files
            cd /home/rdpuser/apps
            tar -xzf deployment.tar.gz -C traderpluseditor
            rm deployment.tar.gz
            
            # Navigate to the project directory
            cd traderpluseditor
            
            # Run docker-compose
            docker-compose up --build
            
            # Clean up after deployment
            docker-compose down
          "